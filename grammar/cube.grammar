#
(def @getInitialWall edu.stanford.nlp.sempre.overnight.CubeWorld.getInitialWall)
(def @newInitialWall edu.stanford.nlp.sempre.overnight.CubeWorld.newInitialWall)
(def @randomWall edu.stanford.nlp.sempre.overnight.CubeWorld.randomWall)

(def @changeSetColor edu.stanford.nlp.sempre.overnight.CubeWorld.changeSetColor)
(def @removeSet edu.stanford.nlp.sempre.overnight.CubeWorld.removeSet)
(def @setUnion edu.stanford.nlp.sempre.overnight.CubeWorld.setUnion)
(def @setIntersection edu.stanford.nlp.sempre.overnight.CubeWorld.setIntersection)
(def @getColor edu.stanford.nlp.sempre.overnight.CubeWorld.getColor)
(def @getRowBottom edu.stanford.nlp.sempre.overnight.CubeWorld.getRowBottom)
(def @getRowTop edu.stanford.nlp.sempre.overnight.CubeWorld.getRowTop)
(def @stackOnTop edu.stanford.nlp.sempre.overnight.CubeWorld.stackOnTop)


(rule $ROOT ($Action) (IdentityFn))

# for debugging, mostly
(rule $ROOT ($Set ) (IdentityFn) )

# some internal commands
(rule $Action ( _getInitialWall ) (ConstantFn (call @getInitialWall)))
(rule $Action ( _newInitialWall ) (ConstantFn (call @newInitialWall)))
(rule $Action ( _randomWall ) (ConstantFn (call @randomWall (number 10) (number 8))))

(rule $Action ( remove $Set ) (lambda s (call @removeSet (var s) )))
(rule $Action ( change $Set $Color )
      (lambda s (lambda c (call @changeSetColor (var s) (var c)))))
(rule $Action ( stack $Set $Color )
      (lambda s (lambda c (call @stackOnTop (var s) (var c)))))

(rule $Set ( union $Set $Set) (lambda s1 (lambda s2
(call @setUnion (var s1) (var s2)))))

(rule $Set ( inter $Set $Set) (lambda s1 (lambda s2
(call @setIntersection (var s1) (var s2)))))

(rule $Set ($Color) (lambda c (call @getColor (var c) )))

(rule $Set (row $Number) (lambda c (call @getRowBottom (var c) )))
(rule $Set (top $Number) (lambda c (call @getRowTop (var c) )))

(rule $Number ($PHRASE) (NumberFn))

(rule $Color (cyan) (ConstantFn (number 0 COLOR)))
(rule $Color (brown) (ConstantFn (number 1 COLOR)))
(rule $Color (red) (ConstantFn (number 2 COLOR)))
(rule $Color (orange) (ConstantFn (number 3 COLOR)))
(rule $Color (yellow) (ConstantFn (number 4 COLOR)))
